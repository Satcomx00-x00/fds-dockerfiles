name: Docker Image CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

# Define concurrency group
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-dockerfile-list:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate list of Dockerfiles
        run: |
          echo '{"dockerfiles":[' > dockerfile_list.json
          find . -type f \( -name "Dockerfile" -o -name "*.Dockerfile" \) | sed 's|^./||' | sed 's|$|",|' | sed 's|^|"|' >> dockerfile_list.json
          echo ']}' >> dockerfile_list.json

      - name: Create matrix for build job
        id: create-matrix
        run: |
          echo "dockerfiles=(" > matrix.sh
          while IFS= read -r line; do
            path=$(echo "$line" | sed -E 's/.*"(\.\/dockerfiles\/[^"]+)".*/\1/')
            tag=$(echo "$path" | awk -F/ '{print $(NF-1)}')
            echo "{\"path\":\"$path\", \"tag\":\"$tag\"}," >> matrix.sh
          done < <(grep -o '".*"' dockerfile_list.json)
          echo ")" >> matrix.sh
          source matrix.sh
          MATRIX_JSON=$(printf '%s\n' "${dockerfiles[@]}" | jq -cs '.')
          echo "::set-output name=matrix::${MATRIX_JSON}"



  build:
    needs: generate-dockerfile-list
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-dockerfile-list.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3

      - name: Set project name
        run: echo "PROJECT_NAME=$(echo $GITHUB_REPOSITORY | sed 's|.*/||')" >> $GITHUB_ENV

      - name: Build the Docker image
        run: |
          docker build . --file ${{ matrix.path }} --tag ${{ secrets.DOCKERHUB_LOGIN }}/${{ env.PROJECT_NAME }}:${{ matrix.tag }}

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ secrets.DOCKERHUB_LOGIN }}/${{ env.PROJECT_NAME }}:${{ matrix.tag }}
