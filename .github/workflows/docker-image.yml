name: Docker Image CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-dockerfile-list:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate list of Dockerfiles
        run: |
          echo '{"dockerfiles":[' > dockerfile_list.json
          find . -type f \( -name "Dockerfile" -o -name "*.Dockerfile" \) -printf '"%p", ' >> dockerfile_list.json
          echo 'null]}' >> dockerfile_list.json
          sed -i '$ s/, null]/]/' dockerfile_list.json # Correctly formats the JSON to remove the last comma
      - name: Print dockerfile_list.json
        run: cat dockerfile_list.json
      - name: Set output
        id: set-matrix
        run: |
          MATRIX=$(jq -c '{dockerfiles: [.dockerfiles[] | select(. != null)]}' dockerfile_list.json)
          echo "::set-output name=matrix::${MATRIX}"
          echo "MATRIX_JSON=${MATRIX}" >> $GITHUB_ENV

  build:
    needs: generate-dockerfile-list
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{fromJson(needs.generate-dockerfile-list.outputs.matrix).dockerfiles}}
    steps:
      - uses: actions/checkout@v3

      - name: Set project name
        run: echo "PROJECT_NAME=$(echo $GITHUB_REPOSITORY | sed 's|.*/||')" >> $GITHUB_ENV

      - name: Copy entrypoint.sh to Dockerfile directory
        run: |
          DOCKERFILE_DIR=$(dirname ${{ matrix.dockerfile }})
          cp ./entrypoint.sh $DOCKERFILE_DIR

      - name: Build and Tag Docker image
        run: |
          DOCKERFILE_PATH="${{ matrix.dockerfile }}"
          TAG=$(echo "$DOCKERFILE_PATH" | awk -F/ '{print $(NF-1)}' | tr '[:upper:]' '[:lower:]')  # Ensure TAG is lowercase
          IMAGE_NAME="${{ secrets.DOCKERHUB_LOGIN }}/fds:$TAG"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV  # Pass IMAGE_NAME to subsequent steps
          echo "Building Docker image: $IMAGE_NAME"
          docker build . --file "$DOCKERFILE_PATH" --tag "$IMAGE_NAME"
        
      - name: Test Docker image
        run: |
          echo "Testing Docker image: $IMAGE_NAME"
          # Ensure to run the fds command with the correct path to the test file
          docker run --rm $IMAGE_NAME fds /Test_File/test_file.fds
        shell: /usr/bin/bash -e {0}
        env:
          PROJECT_NAME: fds-dockerfiles
          IMAGE_NAME: $IMAGE_NAME
        
        
      - name: Print IMAGE_NAME for debugging
        run: |
          echo "IMAGE_NAME to be used for testing: $IMAGE_NAME"
        
      - name: Push Docker image
        run: |
          echo "Logging in to Docker Hub..."
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin
          echo "Pushing Docker image: $IMAGE_NAME"
          docker push "$IMAGE_NAME"
