name: Docker Image CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

# Define concurrency group
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-dockerfile-list:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate list of Dockerfiles
        run: |
          echo '{"dockerfiles":[' > dockerfile_list.json
          find . -type f \( -name "Dockerfile" -o -name "*.Dockerfile" \) | sed 's|^./||' | sed 's|$|",|' | sed 's|^|"|' >> dockerfile_list.json
          echo ']}' >> dockerfile_list.json
      - name: Print dockerfile_list.json
        run: cat dockerfile_list.json
      - name: Set output
        id: set-matrix
        run: |
          echo "::set-output name=matrix::$(jq -c . dockerfile_list.json)"

  build:
    needs: generate-dockerfile-list
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{fromJson(needs.generate-dockerfile-list.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3

      - name: Set project name
        run: echo "PROJECT_NAME=$(echo $GITHUB_REPOSITORY | sed 's|.*/||')" >> $GITHUB_ENV

      - name: Build and Push Docker image
        run: |
          for dockerfile_path in "${{ matrix.dockerfiles }}"; do
            version=$(echo "$dockerfile_path" | sed -E 's|.*/dockerfiles/([^/]+)/Dockerfile|\1|')
            image_name="${{ secrets.DOCKERHUB_LOGIN }}/${{ env.PROJECT_NAME }}:$version"
            docker build . --file $dockerfile_path --tag $image_name
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin
            docker push $image_name
          done
