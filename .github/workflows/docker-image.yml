name: Docker Image CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TEST_FILE_PATH: "/Test_File/test_file.fds"
  TEST_MPI_PROCESSES: 1
  DOCKER_REGISTRY: docker.io
  TEST_OUTPUT_DIR: "test_output"

jobs:
  generate-dockerfile-list:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate list of Dockerfiles
        run: |
          echo '{"dockerfiles":[' > dockerfile_list.json
          find . -type f \( -name "Dockerfile" -o -name "*.Dockerfile" \) -printf '"%p", ' >> dockerfile_list.json
          echo 'null]}' >> dockerfile_list.json
          sed -i '$ s/, null]/]/' dockerfile_list.json

      - name: Print dockerfile_list.json
        run: cat dockerfile_list.json

      - name: Set output
        id: set-matrix
        run: |
          MATRIX=$(jq -c '{dockerfiles: [.dockerfiles[] | select(. != null)]}' dockerfile_list.json)
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT
          echo "MATRIX_JSON=${MATRIX}" >> $GITHUB_ENV

  test-and-build:
    needs: generate-dockerfile-list
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{fromJson(needs.generate-dockerfile-list.outputs.matrix).dockerfiles}}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          DOCKERFILE_DIR=$(dirname ${{ matrix.dockerfile }})
          cp ./entrypoint.sh $DOCKERFILE_DIR/
          echo "DOCKERFILE_DIR=${DOCKERFILE_DIR}" >> $GITHUB_ENV
          
          # Generate tag from dockerfile path
          TAG=$(echo "${{ matrix.dockerfile }}" | awk -F/ '{print $(NF-1)}' | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="${{ secrets.DOCKERHUB_LOGIN }}/fds:${TAG}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "Building image: ${IMAGE_NAME}"
          
          # Create test output directory
          mkdir -p $TEST_OUTPUT_DIR

      - name: Build Docker image
        run: |
          docker build \
            --file "${{ matrix.dockerfile }}" \
            --tag "$IMAGE_NAME" \
            --build-arg TEST_FILE_PATH="$TEST_FILE_PATH" \
            .

      - name: Run FDS test simulation
        run: |
          echo "Running test simulation with image: $IMAGE_NAME"
          docker run \
            -v $(pwd)/$TEST_OUTPUT_DIR:/output \
            -e FDS_FILE_PATH="$TEST_FILE_PATH" \
            -e MPI_PROCESSES="$TEST_MPI_PROCESSES" \
            -e INPUT_ARCHIVE_DIR="Test_File" \
            "$IMAGE_NAME"

      - name: Verify test results
        run: |
          echo "Verifying simulation outputs..."
          
          # Check for output files
          test -f "$TEST_OUTPUT_DIR/test_file.out" || {
            echo "Error: test_file.out not found"
            exit 1
          }
          
          test -f "$TEST_OUTPUT_DIR/test_file.smv" || {
            echo "Error: test_file.smv not found"
            exit 1
          }
          
          # Check for error messages in the output
          if grep -i "error" "$TEST_OUTPUT_DIR/test_file.out"; then
            echo "Error: Found error messages in simulation output"
            exit 1
          fi
          
          # Check for successful completion message
          if ! grep -i "STOP: FDS completed successfully" "$TEST_OUTPUT_DIR/test_file.out"; then
            echo "Error: FDS simulation did not complete successfully"
            exit 1
          }
          
          echo "Test simulation completed successfully"

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: fds-test-results-${{ matrix.dockerfile }}
          path: |
            ${{ env.TEST_OUTPUT_DIR }}/*.out
            ${{ env.TEST_OUTPUT_DIR }}/*.smv
          retention-days: 7

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        run: docker push "$IMAGE_NAME"